stages:
    - configure
    - build
    # - test
    # - deploy

variables:
    AWS_PROFILE: "802783396857"

configure_aws_cli:
    stage: configure
    image: amazon/aws-cli:latest
    script:
        - echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $HOME/.aws/credentials
        - echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $HOME/.aws/credentials
        - echo "AWS_DEFAULT_REGION=eu-west-1" >> $HOME/.aws/config
        - echo "output=json" >> $HOME/.aws/config
        - cat $HOME/.aws/config
    only:
        - master

build:
    stage: build
    image: node:latest
    tags:
        - nei-runner
    # services:
    #     - docker:dind

    # script:
    #     - echo "hello world"
    #     - ls -al
    #     - docker pull nginx
    #     - docker images
    before_script:
        # - cat /etc/os-release
        - apt-get update -y
        - apt-get install -y docker.io
        - apt-get install -y awscli
        - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

    script:
        - aws ecr get-login-password --region eu-west-1 --profile 802783396857 | docker login -u AWS --password-stdin $ECR_URI.dkr.ecr.$ECR_REGION.amazonaws.com 2>&1
        # - docker buildx build --platform linux/amd64 -t $DOCKER_REGISTRY/$DOCKER_REPO:$CI_COMMIT_TAG .
        - docker build -t $ECR_URI.dkr.ecr.$ECR_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG .
        # - /usr/bin/docker tag $DOCKER_REGISTRY:$CI_PIPELINE_IID $DOCKER_REGISTRY:latest
        - docker images
    #     - aws ecr get-login-password --region eu-west-1 --profile 8027 | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    #     - docker push $DOCKER_REGISTRY/$DOCKER_REPO:$CI_COMMIT_TAG
    only:
        - main
# deploy:
#     stage: deploy
#     image: 802783396857.dkr.ecr.eu-west-1.amazonaws.com/nei_repository:latest
#     script:
#         - docker build -t $CI

# cache:
#   paths:
#     - node_modules/

# test_async:
#   script:
#     - npm install
#     - node ./specs/start.js ./specs/async.spec.js

# test_db:
#   script:
#     - npm install
#     - node ./specs/start.js ./specs/db-postgres.spec.js

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
