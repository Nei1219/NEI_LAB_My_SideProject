stages:
    # - build
    # - deploy
    - pre_deploy

variables:
    TASK_DEFINITION_NAME: cicd-task
    CLUSTER_NAME: cicd-cluster
    SERVICE_NAME: cicd-service

.docker-build:
    # Use the official docker image.
    image: docker:latest
    stage: build
    tags:
        - nei-runner
    services:
        - docker:dind
    before_script:
        - cat /etc/os-release
        - hostname
    script:
        - ls
        - hostname

.build_and_configure:
    stage: build
    image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
    tags:
        - nei-runner
    services:
        - name: docker:dind
    variables:
        DOCKER_DRIVER: overlay2
    before_script:
        - docker ps -a
        - aws --version
        - hostname
        - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    script:
        - aws configure list
        - aws ecr get-login-password --region eu-west-1 | docker login -u AWS --password-stdin $ECR_URI.dkr.ecr.$ECR_REGION.amazonaws.com 2>&1
        - docker --version
        - docker build -t $ECR_URI.dkr.ecr.$ECR_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG .
        - docker images
        - docker push $ECR_URI.dkr.ecr.$ECR_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
    only:
        - main

pre_deploy:
    stage: pre_deploy
    image: mcr.microsoft.com/powershell
    tags:
        - nei-runner-cd
    script:
        - apt-get update
        - apt-get install curl -y
        - apt-get install unzip
        - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        - unzip awscliv2.zip
        - sudo ./aws/install
        - aws --version
        - cat /etc/os-release
        - pwsh
        # - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        # - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        # - pwsh -f CICDscript.ps1

.deploy:
    stage: deploy
    image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
    tags:
        - nei-runner-cd
    before_script:
        - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        # - aws ecr get-login-password --region eu-west-1 | docker login -u AWS --password-stdin $ECR_URI.dkr.ecr.$ECR_REGION.amazonaws.com 2>&1
    script:
        -
        - sh CICDscript.ps1
        # - echo 'Run docker container'
        # - docker pull $ECR_URI.dkr.ecr.$ECR_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
        # - docker run -d -p 8109:3000 --name nei-web $ECR_URI.dkr.ecr.$ECR_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
        # - docker ps -a
#   environment: production

# script:
#     - echo "hello world"
#     - ls -al
#     - docker pull nginx
#     - docker images

# script:
# - docker buildx build --platform linux/amd64 -t $DOCKER_REGISTRY/$DOCKER_REPO:$CI_COMMIT_TAG .
# - /usr/bin/docker tag $DOCKER_REGISTRY:$CI_PIPELINE_IID $DOCKER_REGISTRY:latest
#     - aws ecr get-login-password --region eu-west-1 --profile 8027 | docker login --username AWS --password-stdin $DOCKER_REGISTRY
# only:
# - main
# deploy:
#     stage: deploy
#     image: 802783396857.dkr.ecr.eu-west-1.amazonaws.com/nei_repository:latest
#     script:
#         - docker build -t $CI

# cache:
#   paths:
#     - node_modules/

# test_async:
#   script:
#     - npm install
#     - node ./specs/start.js ./specs/async.spec.js

# test_db:
#   script:
#     - npm install
#     - node ./specs/start.js ./specs/db-postgres.spec.js
